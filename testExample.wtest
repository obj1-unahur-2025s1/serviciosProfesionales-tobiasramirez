import example.*

describe "parte 1" {

  test "dos estudiaron en rosario, uno en hurlingham y ninguno en san martin" {
    const nike = new Empresa()
    const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios])
    nike.contratarA(juanita)
    nike.contratarA(melina)
    nike.contratarA(rocio)
    nike.contratarA(luciana)
    assert.equals(2, nike.cuantosEstudiaronEn(uniRosario))
    assert.equals(1, nike.cuantosEstudiaronEn(unahur))
    assert.equals(0, nike.cuantosEstudiaronEn(uniSanMartin))
  }
test "solo rocio como profesional caro" {
  const adidas = new Empresa()
   const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios])
    adidas.contratarA(juanita)
    adidas.contratarA(melina)
    adidas.contratarA(rocio)
    adidas.contratarA(luciana)
    assert.equals(#{rocio}, adidas.profesionalesCaros())
}
test "universidades formadoras son rosario, corrientes y unahur" {
    const samsung = new Empresa()
   const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios])
    samsung.contratarA(juanita)
    samsung.contratarA(melina)
    samsung.contratarA(rocio)
    samsung.contratarA(luciana)
    assert.equals(#{uniCorrientes , uniRosario, unahur}, samsung.universidadesFormadoras())
}
test "juanita es el profesional mas barato" {
  const lg = new Empresa()
   const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios])
    lg.contratarA(juanita)
    lg.contratarA(melina)
    lg.contratarA(rocio)
    lg.contratarA(luciana)
    assert.equals(juanita, lg.profesionalMasBarato())
}
test "es acotada" {
  const hisense = new Empresa()
   const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios])
    hisense.contratarA(juanita)
  hisense.contratarA(melina)
    hisense.contratarA(rocio)
   hisense.contratarA(luciana)
    assert.that(hisense.esDeGenteAcotada())
}
test "si le agregamos dos provincias mas a luciana, ya no es acotada" {
  const ford = new Empresa()
   const juanita = new ProfesionalVinculado(universidad = uniRosario)
    const melina = new ProfesionalLitoral(universidad = uniCorrientes)
    const rocio = new ProfesionalesLibres(universidad = unahur , honorarios = 5000 , puedeTrabajarEn = [cordoba, santaFe, buenosAires])
    const luciana = new ProfesionalesLibres(universidad = uniRosario , honorarios = 3200 , puedeTrabajarEn = [santaFe, entreRios, buenosAires, cordoba])
    ford.contratarA(juanita)
    ford.contratarA(melina)
    ford.contratarA(rocio)
    ford.contratarA(luciana)
    assert.notThat(ford.esDeGenteAcotada())
}
}
